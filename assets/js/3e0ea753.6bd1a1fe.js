"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[886],{4123:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return u}});var a=r(5773),i=r(808),n=(r(7378),r(5318)),o=r(517),l=r(7637),s=["components"],d={id:"other-exports",title:"Other Exports",sidebar_label:"Other Exports",hide_title:!0},p=void 0,c={unversionedId:"api/other-exports",id:"api/other-exports",isDocsHomePage:!1,title:"Other Exports",description:"&nbsp;",source:"@site/../docs/api/otherExports.mdx",sourceDirName:"api",slug:"/api/other-exports",permalink:"/redux-toolkit/api/other-exports",tags:[],version:"current",lastUpdatedAt:1656209250,formattedLastUpdatedAt:"6/26/2022",frontMatter:{id:"other-exports",title:"Other Exports",sidebar_label:"Other Exports",hide_title:!0},sidebar:"docs",previous:{title:"Matching Utilities",permalink:"/redux-toolkit/api/matching-utilities"},next:{title:"RTK Query Overview",permalink:"/redux-toolkit/rtk-query/overview"}},u=[{value:"<code>nanoid</code>",id:"nanoid",children:[],level:3},{value:"<code>miniSerializeError</code>",id:"miniserializeerror",children:[],level:3},{value:"<code>copyWithStructuralSharing</code>",id:"copywithstructuralsharing",children:[],level:3},{value:"Exports from Other Libraries",id:"exports-from-other-libraries",children:[{value:"<code>createNextState</code>",id:"createnextstate",children:[],level:3},{value:"<code>current</code>",id:"current",children:[],level:3},{value:"<code>original</code>",id:"original",children:[],level:3},{value:"<code>isDraft</code>",id:"isdraft",children:[],level:3},{value:"<code>freeze</code>",id:"freeze",children:[],level:3},{value:"<code>combineReducers</code>",id:"combinereducers",children:[],level:3},{value:"<code>compose</code>",id:"compose",children:[],level:3},{value:"<code>bindActionCreators</code>",id:"bindactioncreators",children:[],level:3},{value:"<code>createStore</code>",id:"createstore",children:[],level:3},{value:"<code>applyMiddleware</code>",id:"applymiddleware",children:[],level:3}],level:2}],m={toc:u};function h(e){var t=e.components,r=(0,i.Z)(e,s);return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"other-exports"},"Other Exports"),(0,n.kt)("p",null,"Redux Toolkit exports some of its internal utilities, and re-exports additional functions from other dependencies as well."),(0,n.kt)("h3",{id:"nanoid"},(0,n.kt)("inlineCode",{parentName:"h3"},"nanoid")),(0,n.kt)("p",null,"An inlined copy of ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ai/nanoid"},(0,n.kt)("inlineCode",{parentName:"a"},"nanoid/nonsecure")),". Generates a non-cryptographically-secure random ID string. ",(0,n.kt)("inlineCode",{parentName:"p"},"createAsyncThunk")," uses this by default for request IDs. May also be useful for other cases as well."),(0,n.kt)(l.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { nanoid } from '@reduxjs/toolkit'\n\nconsole.log(nanoid())\n// 'dgPXxUz_6fWIQBD8XmiSy'\n"))),(0,n.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { nanoid } from '@reduxjs/toolkit'\n\nconsole.log(nanoid())\n// 'dgPXxUz_6fWIQBD8XmiSy'\n")))),(0,n.kt)("h3",{id:"miniserializeerror"},(0,n.kt)("inlineCode",{parentName:"h3"},"miniSerializeError")),(0,n.kt)("p",null,"The default error serialization function used by ",(0,n.kt)("inlineCode",{parentName:"p"},"createAsyncThunk"),", based on ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/sindresorhus/serialize-error"},"https://github.com/sindresorhus/serialize-error"),". If its argument is an object (such as an ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," instance), it returns a plain JS ",(0,n.kt)("inlineCode",{parentName:"p"},"SerializedError")," object that copies over any of the listed fields. Otherwise, it returns a stringified form of the value: ",(0,n.kt)("inlineCode",{parentName:"p"},"{ message: String(value) }"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"export interface SerializedError {\n  name?: string\n  message?: string\n  stack?: string\n  code?: string\n}\n\nexport function miniSerializeError(value: any): SerializedError {}\n")),(0,n.kt)("h3",{id:"copywithstructuralsharing"},(0,n.kt)("inlineCode",{parentName:"h3"},"copyWithStructuralSharing")),(0,n.kt)("p",null,"A utility that will recursively merge two similar objects together, preserving existing references if the values appear to be the same. This is used internally to help ensure that re-fetched data keeps using the same references unless the new data has actually changed, to avoid unnecessary re-renders. Otherwise, every re-fetch would likely cause the entire dataset to be replaced and all consuming components to always re-render."),(0,n.kt)("p",null,"If either of the inputs are not plain JS objects or arrays, the new value is returned."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"export function copyWithStructuralSharing<T>(oldObj: any, newObj: T): T\nexport function copyWithStructuralSharing(oldObj: any, newObj: any): any {}\n")),(0,n.kt)("h2",{id:"exports-from-other-libraries"},"Exports from Other Libraries"),(0,n.kt)("h3",{id:"createnextstate"},(0,n.kt)("inlineCode",{parentName:"h3"},"createNextState")),(0,n.kt)("p",null,"The default immutable update function from the ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},(0,n.kt)("inlineCode",{parentName:"a"},"immer")," library"),", re-exported here as ",(0,n.kt)("inlineCode",{parentName:"p"},"createNextState")," (also commonly referred to as ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/produce"},(0,n.kt)("inlineCode",{parentName:"a"},"produce")),")"),(0,n.kt)("h3",{id:"current"},(0,n.kt)("inlineCode",{parentName:"h3"},"current")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/current"},"The ",(0,n.kt)("inlineCode",{parentName:"a"},"current")," function")," from the ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},(0,n.kt)("inlineCode",{parentName:"a"},"immer")," library"),", which takes a snapshot of the current state of a draft and finalizes it (but without freezing). Current is a great utility to print the current state during debugging, and the output of ",(0,n.kt)("inlineCode",{parentName:"p"},"current")," can also be safely leaked outside the producer."),(0,n.kt)("h3",{id:"original"},(0,n.kt)("inlineCode",{parentName:"h3"},"original")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/original"},"The ",(0,n.kt)("inlineCode",{parentName:"a"},"original")," function")," from the ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},(0,n.kt)("inlineCode",{parentName:"a"},"immer")," library"),", which returns the original object. This is particularly useful for referential equality check in reducers."),(0,n.kt)(l.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer, createAction, current } from '@reduxjs/toolkit'\n\ninterface Todo {\n  //...\n}\nconst addTodo = createAction<Todo>('addTodo')\n\nconst initialState = [] as Todo[]\n\nconst todosReducer = createReducer(initialState, (builder) => {\n  builder.addCase(addTodo, (state, action) => {\n    state.push(action.payload)\n    console.log(current(state))\n  })\n})\n"))),(0,n.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { createReducer, createAction, current } from '@reduxjs/toolkit'\nconst addTodo = createAction('addTodo')\n\nconst initialState = []\n\nconst todosReducer = createReducer(initialState, (builder) => {\n  builder.addCase(addTodo, (state, action) => {\n    state.push(action.payload)\n    console.log(current(state))\n  })\n})\n")))),(0,n.kt)("h3",{id:"isdraft"},(0,n.kt)("inlineCode",{parentName:"h3"},"isDraft")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/original"},"The ",(0,n.kt)("inlineCode",{parentName:"a"},"isDraft")," function")," from the ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},(0,n.kt)("inlineCode",{parentName:"a"},"immer")," library"),', which checks to see if a given value is a Proxy-wrapped "draft" state.'),(0,n.kt)("h3",{id:"freeze"},(0,n.kt)("inlineCode",{parentName:"h3"},"freeze")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/api"},"The ",(0,n.kt)("inlineCode",{parentName:"a"},"freeze")," function")," from the ",(0,n.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},(0,n.kt)("inlineCode",{parentName:"a"},"immer")," library"),", which ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"},"freezes")," draftable objects."),(0,n.kt)("h3",{id:"combinereducers"},(0,n.kt)("inlineCode",{parentName:"h3"},"combineReducers")),(0,n.kt)("p",null,"Redux's ",(0,n.kt)("a",{parentName:"p",href:"https://redux.js.org/api/combinereducers"},(0,n.kt)("inlineCode",{parentName:"a"},"combineReducers")),", re-exported for convenience. While ",(0,n.kt)("inlineCode",{parentName:"p"},"configureStore")," calls this internally, you may wish to call it yourself to compose multiple levels of slice reducers."),(0,n.kt)("h3",{id:"compose"},(0,n.kt)("inlineCode",{parentName:"h3"},"compose")),(0,n.kt)("p",null,"Redux's ",(0,n.kt)("a",{parentName:"p",href:"https://redux.js.org/api/compose"},(0,n.kt)("inlineCode",{parentName:"a"},"compose")),". It composes functions from right to left.\nThis is a functional programming utility. You might want to use it to apply several store custom enhancers/ functions in a row."),(0,n.kt)("h3",{id:"bindactioncreators"},(0,n.kt)("inlineCode",{parentName:"h3"},"bindActionCreators")),(0,n.kt)("p",null,"Redux's ",(0,n.kt)("a",{parentName:"p",href:"https://redux.js.org/api/bindactioncreators"},(0,n.kt)("inlineCode",{parentName:"a"},"bindActionCreators")),". It wraps action creators with ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch()")," so that they dispatch immediately when called."),(0,n.kt)("h3",{id:"createstore"},(0,n.kt)("inlineCode",{parentName:"h3"},"createStore")),(0,n.kt)("p",null,"Redux's ",(0,n.kt)("a",{parentName:"p",href:"https://redux.js.org/api/createstore"},(0,n.kt)("inlineCode",{parentName:"a"},"createStore")),". You should not need to use this directly."),(0,n.kt)("h3",{id:"applymiddleware"},(0,n.kt)("inlineCode",{parentName:"h3"},"applyMiddleware")),(0,n.kt)("p",null,"Redux's ",(0,n.kt)("a",{parentName:"p",href:"https://redux.js.org/api/applymiddleware"},(0,n.kt)("inlineCode",{parentName:"a"},"applyMiddleware")),". You should not need to use this directly."))}h.isMDXComponent=!0}}]);