"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8706],{1424:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return h}});var a=n(5773),i=n(808),s=(n(7378),n(5318)),o=n(517),r=n(7637),d=["components"],u={id:"mutations",title:"Mutations",sidebar_label:"Mutations",hide_title:!0,description:"RTK Query > \uc0ac\uc6a9\ubc95 > Mutations: sending updates to the server"},l=void 0,p={unversionedId:"rtk-query/usage/mutations",id:"rtk-query/usage/mutations",isDocsHomePage:!1,title:"Mutations",description:"RTK Query > \uc0ac\uc6a9\ubc95 > Mutations: sending updates to the server",source:"@site/../docs/rtk-query/usage/mutations.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/mutations",permalink:"/redux-toolkit/rtk-query/usage/mutations",tags:[],version:"current",lastUpdatedAt:1656211135,formattedLastUpdatedAt:"6/26/2022",frontMatter:{id:"mutations",title:"Mutations",sidebar_label:"Mutations",hide_title:!0,description:"RTK Query > \uc0ac\uc6a9\ubc95 > Mutations: sending updates to the server"},sidebar:"docs",previous:{title:"Queries",permalink:"/redux-toolkit/rtk-query/usage/queries"},next:{title:"Cache Behavior",permalink:"/redux-toolkit/rtk-query/usage/cache-behavior"}},h=[{value:"Overview",id:"overview",children:[],level:2},{value:"Mutation Endpoint \uc815\uc758\ud558\uae30",id:"mutation-endpoint-\uc815\uc758\ud558\uae30",children:[],level:2},{value:"Performing Mutations with React Hooks",id:"performing-mutations-with-react-hooks",children:[{value:"Mutation Hook Behavior",id:"mutation-hook-behavior",children:[],level:3},{value:"Frequently Used Mutation Hook Return Values",id:"frequently-used-mutation-hook-return-values",children:[],level:3},{value:"Shared Mutation Results",id:"shared-mutation-results",children:[],level:3},{value:"Standard Mutation Example",id:"standard-mutation-example",children:[],level:3}],level:2},{value:"Advanced Mutations with Revalidation",id:"advanced-mutations-with-revalidation",children:[{value:"Revalidation Example",id:"revalidation-example",children:[],level:3}],level:2}],c={toc:h};function m(e){var t=e.components,n=(0,i.Z)(e,d);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mutations"},"Mutations"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"Mutations\uc740 \ub370\uc774\ud130 \uc5c5\ub370\uc774\ud2b8\ub97c \uc11c\ubc84\ub85c \uc804\uc1a1\ud558\uace0 \ubcc0\uacbd \uc0ac\ud56d\uc744 \ub85c\uceec \uce90\uc2dc\uc5d0 \uc801\uc6a9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Mutations\uc740 \uce90\uc2dc\ub41c \ub370\uc774\ud130\ub97c \ubb34\ud6a8\ud654\ud558\uace0 \uac15\uc81c\ub85c \ub2e4\uc2dc \uac00\uc838\uc62c \uc218\ub3c4(force re-fetch) \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("h2",{id:"mutation-endpoint-\uc815\uc758\ud558\uae30"},"Mutation Endpoint \uc815\uc758\ud558\uae30"),(0,s.kt)("p",null,"Mutation endpoint\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"createApi"),"\uc758 ",(0,s.kt)("inlineCode",{parentName:"p"},"endpoints")," \uc139\uc158\uc5d0\uc11c ",(0,s.kt)("inlineCode",{parentName:"p"},"build.mutation()")," \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uc815\uc758\ud569\ub2c8\ub2e4."),(0,s.kt)("p",null,"Mutation endpoints\ub294 URL\uc744 \uad6c\uc131\ud558\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"query")," \ucf5c\ubc31 \ud568\uc218 (including any URL query params), \ub610\ub294 \uc784\uc758\uc758 \ube44\ub3d9\uae30 \ub85c\uc9c1\uc744 \ucc98\ub9ac\ud558\uace0 \uacb0\uacfc\ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4\uba74 ",(0,s.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/customizing-queries#customizing-queries-with-queryfn"},(0,s.kt)("inlineCode",{parentName:"a"},"queryFn")," \ucf5c\ubc31 \ud568\uc218")," \ub97c \uc815\uc758\ud558\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. The ",(0,s.kt)("inlineCode",{parentName:"p"},"query")," callback may also return an object containing the URL, the HTTP method to use and a request body."),(0,s.kt)("p",null,"If the ",(0,s.kt)("inlineCode",{parentName:"p"},"query"),' callback needs additional data to generate the URL, it should be written to take a single argument. \uc5ec\ub7ec \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud574\uc57c \ud558\ub294 \uacbd\uc6b0 \ub2e8\uc77c "\uc635\uc158 \uac1d\uccb4" \ud615\uc2dd\uc73c\ub85c \uc804\ub2ec\ud558\uc138\uc694.'),(0,s.kt)("p",null,"Mutation endpoint\ub294 \uc694\uccad\uc5d0 \ub530\ub978 \uacb0\uacfc\uac00 \uce90\uc2dc\ub418\uae30 \uc804\uc5d0 \uc751\ub2f5 \ub0b4\uc6a9\uc744 \uc218\uc815\ud560 \uc218 \uc788\uace0, \uce90\uc2dc \ubb34\ud6a8\ud654\ub97c \uc2dd\ubcc4\ud558\uae30 \uc704\ud574 \ud0dc\uadf8\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc73c\uba70, \uce90\uc2dc \ud56d\ubaa9\uc774 \ucd94\uac00 \ubc0f \uc81c\uac70\ub420 \ub54c\ub9c8\ub2e4 \ucd94\uac00 \ub85c\uc9c1\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud574\uc11c \uce90\uc2dc \ub77c\uc774\ud504\uc0ac\uc774\ud074 \ucf5c\ubc31 \ud568\uc218\ub97c \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of all mutation endpoint options"',title:'"Example',of:!0,all:!0,mutation:!0,endpoint:!0,'options"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport { Post } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    updatePost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      // highlight-start\n      // note: an optional `queryFn` may be used in place of `query`\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response: { data: Post }, meta, arg) => response.data,\n      invalidatesTags: ['Post'],\n      // onQueryStarted is useful for optimistic updates\n      // The 2nd parameter is the destructured `MutationLifecycleApi`\n      async onQueryStarted(\n        arg,\n        { dispatch, getState, queryFulfilled, requestId, extra, getCacheEntry }\n      ) {},\n      // The 2nd parameter is the destructured `MutationCacheLifecycleApi`\n      async onCacheEntryAdded(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          cacheEntryRemoved,\n          cacheDataLoaded,\n          getCacheEntry,\n        }\n      ) {},\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of all mutation endpoint options"',title:'"Example',of:!0,all:!0,mutation:!0,endpoint:!0,'options"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    updatePost: build.mutation({\n      // highlight-start\n      // note: an optional `queryFn` may be used in place of `query`\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response, meta, arg) => response.data,\n      invalidatesTags: ['Post'],\n      // onQueryStarted is useful for optimistic updates\n      // The 2nd parameter is the destructured `MutationLifecycleApi`\n      async onQueryStarted(\n        arg,\n        { dispatch, getState, queryFulfilled, requestId, extra, getCacheEntry }\n      ) {},\n      // The 2nd parameter is the destructured `MutationCacheLifecycleApi`\n      async onCacheEntryAdded(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          cacheEntryRemoved,\n          cacheDataLoaded,\n          getCacheEntry,\n        }\n      ) {},\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"onQueryStarted")," \uba54\uc18c\ub4dc\ub294 ",(0,s.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/manual-cache-updates#optimistic-updates"},"optimistic updates")," \uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4."))),(0,s.kt)("h2",{id:"performing-mutations-with-react-hooks"},"Performing Mutations with React Hooks"),(0,s.kt)("h3",{id:"mutation-hook-behavior"},"Mutation Hook Behavior"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"useQuery"),"\uc640 \ub2ec\ub9ac ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation"),'\uc740 tuple\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. tuple\uc758 \uccab\ubc88\uc9f8 \ud56d\ubaa9\uc740 "trigger" \ud568\uc218\uc774\uba70, \ub450\ubc88\uc9f8 \ud56d\ubaa9\uc740 ',(0,s.kt)("inlineCode",{parentName:"p"},"status"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),", \ubc0f ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," \uac00 \ub4e4\uc5b4\uc788\ub294 object\uc785\ub2c8\ub2e4."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"useQuery"),"\uc640 \ub2ec\ub9ac ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation"),"\uc740 \uc790\ub3d9\uc801\uc73c\ub85c \uc2e4\ud589\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Mutation\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud574\uc11c\ub294 hook\uc5d0\uc11c \ubc18\ud658\ub41c \ud29c\ud50c\uc758 \uccab\ubc88\uc9f8 \ud56d\ubaa9\uc778 trigger \ud568\uc218\ub97c \ud638\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/created-api/hooks#usemutation"},(0,s.kt)("inlineCode",{parentName:"a"},"useMutation"))," for the hook signature and additional details."),(0,s.kt)("h3",{id:"frequently-used-mutation-hook-return-values"},"Frequently Used Mutation Hook Return Values"),(0,s.kt)("p",null,"\uc55e\uc11c \ub9d0\ud55c \ub300\ub85c ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation"),' hook\uc740 "mutation trigger" \ud568\uc218\uc640 \ubba4\ud14c\uc774\uc158 \uacb0\uacfc\ub97c \ub2f4\uace0 \uc788\ub294 \uac1d\uccb4\uc778 "mutation result"\ub97c \ud29c\ud50c\uc758 \ud615\ud0dc\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.'),(0,s.kt)("p",null,'The "mutation trigger" is a function that when called, will fire off the mutation request for that endpoint. Calling the "mutation trigger" returns a promise with an ',(0,s.kt)("inlineCode",{parentName:"p"},"unwrap")," property, which can be called to unwrap the mutation call and provide the raw response/error. This can be useful if you wish to determine whether the mutation succeeds/fails inline at the call-site."),(0,s.kt)("p",null,'The "mutation result" is an object containing properties such as the latest ',(0,s.kt)("inlineCode",{parentName:"p"},"data")," for the mutation request, as well as status booleans for the current request lifecycle state."),(0,s.kt)("p",null,'\ub2e4\uc74c\uc740 "mutation result" \uac1d\uccb4\uc5d0\uc11c \uac00\uc7a5 \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \uc18d\uc131 \uc911 \uc77c\ubd80\uc785\ub2c8\ub2e4. Refer to ',(0,s.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/created-api/hooks#usemutation"},(0,s.kt)("inlineCode",{parentName:"a"},"useMutation"))," for an extensive list of all returned properties."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"data")," - The data returned from the latest trigger response, if present. If subsequent triggers from the same hook instance are called, this will return undefined until the new data is received. \uc0c8 \ub370\uc774\ud130\ub85c\uc758 smooth transition\uc744 \uc6d0\ud55c\ub2e4\uba74 component level\uc758 caching\uc744 \uace0\ub824\ud558\uc138\uc694."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"error")," - \uc624\ub958 \uacb0\uacfc\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74 \uc774\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isUninitialized")," - True\ub77c\uba74, mutation\uc774 \ud55c\ubc88\ub3c4 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc558\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isLoading")," - True\ub77c\uba74, mutation\uc774 \uc2e4\ud589\ub418\uc5b4 \uc751\ub2f5\uc744 \uae30\ub2e4\ub9ac\uace0 \uc788\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isSuccess")," - True\ub77c\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc2e4\ud589\ub41c mutation\uc758 \uc751\ub2f5\uc5d0 \uc131\uacf5\uc801\uc73c\ub85c data\uac00 \uc788\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"isError")," - True\ub77c\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc2e4\ud589\ub41c mutation\uc758 \uc751\ub2f5\uc5d0 \uc624\ub958\uac00 \uc788\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"reset")," - hook\uc744 \ucd08\uae30 \uc0c1\ud0dc\ub85c \ub418\ub3cc\ub9ac\uba70 \uce90\uc2dc\uc5d0\uc11c \ud604\uc7ac \uacb0\uacfc\ub97c \uc81c\uac70\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"With RTK Query, a mutation does not contain a semantic distinction between 'loading' and 'fetching' in the way that a ",(0,s.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/queries#frequently-used-query-hook-return-values"},"query does"),". For a mutation, subsequent calls are not assumed to be necessarily related, so a mutation is either 'loading' or 'not loading', with no concept of 're-fetching'."))),(0,s.kt)("h3",{id:"shared-mutation-results"},"Shared Mutation Results"),(0,s.kt)("p",null,"By default, separate instances of a ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation")," hook are not inherently related to each other.\nTriggering one instance will not affect the result for a separate instance. This applies regardless\nof whether the hooks are called within the same component, or different components."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"no-transpile","no-transpile":!0},"export const ComponentOne = () => {\n  // Triggering `updatePostOne` will affect the result in this component,\n  // but not the result in `ComponentTwo`, and vice-versa\n  const [updatePost, result] = useUpdatePostMutation()\n\n  return <div>...</div>\n}\n\nexport const ComponentTwo = () => {\n  const [updatePost, result] = useUpdatePostMutation()\n\n  return <div>...</div>\n}\n")),(0,s.kt)("p",null,"RTK Query\ub294 'fixedCacheKey' \uc635\uc158\uc744 \ud1b5\ud574 mutation hook instances \uac04\uc5d0 \uacb0\uacfc\ub97c \uacf5\uc720\ud558\ub294 \uc635\uc158\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\nAny ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation")," hooks with the same ",(0,s.kt)("inlineCode",{parentName:"p"},"fixedCacheKey")," string will share results between each other\nwhen any of the trigger functions are called. This should be a unique string shared between each\nmutation hook instance you wish to share results."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"no-transpile","no-transpile":!0},"export const ComponentOne = () => {\n  // Triggering `updatePostOne` will affect the result in both this component,\n  // but as well as the result in `ComponentTwo`, and vice-versa\n  const [updatePost, result] = useUpdatePostMutation({\n    fixedCacheKey: 'shared-update-post',\n  })\n\n  return <div>...</div>\n}\n\nexport const ComponentTwo = () => {\n  const [updatePost, result] = useUpdatePostMutation({\n    fixedCacheKey: 'shared-update-post',\n  })\n\n  return <div>...</div>\n}\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("inlineCode",{parentName:"p"},"fixedCacheKey"),"\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, ",(0,s.kt)("inlineCode",{parentName:"p"},"originalArgs")," \uc18d\uc131\uc740 \uacf5\uc720\ub420 \uc218 \uc5c6\uc73c\uba70 \ud56d\uc0c1 ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," \uac12\uc774 \ub429\ub2c8\ub2e4."))),(0,s.kt)("h3",{id:"standard-mutation-example"},"Standard Mutation Example"),(0,s.kt)("p",null,"This is a modified version of the complete example you can see at the bottom of the page to highlight the ",(0,s.kt)("inlineCode",{parentName:"p"},"updatePost")," mutation. In this scenario, a post is fetched with ",(0,s.kt)("inlineCode",{parentName:"p"},"useQuery"),", and then an ",(0,s.kt)("inlineCode",{parentName:"p"},"EditablePostName")," component is rendered that allows us to edit the name of the post."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/features/posts/PostDetail.tsx"',title:'"src/features/posts/PostDetail.tsx"'},"export const PostDetail = () => {\n  const { id } = useParams<{ id: any }>()\n\n  const { data: post } = useGetPostQuery(id)\n\n  // highlight-start\n  const [\n    updatePost, // This is the mutation trigger\n    { isLoading: isUpdating }, // This is the destructured mutation result\n  ] = useUpdatePostMutation()\n  // highlight-end\n\n  return (\n    <Box p={4}>\n      <EditablePostName\n        name={post.name}\n        onUpdate={(name) => {\n          // If you want to immediately access the result of a mutation, you need to chain `.unwrap()`\n          // if you actually want the payload or to catch the error.\n          // Example: `updatePost().unwrap().then(fulfilled => console.log(fulfilled)).catch(rejected => console.error(rejected))\n\n          return (\n            // highlight-start\n            // Execute the trigger with the `id` and updated `name`\n            updatePost({ id, name })\n            // highlight-end\n          )\n        }}\n        // highlight-start\n        isLoading={isUpdating}\n        // highlight-end\n      />\n    </Box>\n  )\n}\n")),(0,s.kt)("h2",{id:"advanced-mutations-with-revalidation"},"Advanced Mutations with Revalidation"),(0,s.kt)("p",null,'\ud604\uc2e4 \uc138\uacc4\uc5d0\uc11c\ub294 \uac1c\ubc1c\uc790\uac00 mutation\uc744 \uc2e4\ud589\ud55c \ud6c4, \ub85c\uceec \ub370\uc774\ud130 \uce90\uc2dc\ub97c \uc11c\ubc84\uc640 \ub3d9\uae30\ud654 \ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \uc77c\ubc18\uc801\uc785\ub2c8\ub2e4 (aka "revalidation"). RTK \ucffc\ub9ac\ub294 \uc774\uc5d0 \ub300\ud55c \ubcf4\ub2e4 \uc911\uc559 \uc9d1\uc911\uc2dd \uc811\uadfc \ubc29\uc2dd\uc744 \ucde8\ud558\uba70 API \uc11c\ube44\uc2a4 \uc815\uc758\uc5d0\uc11c invalidation behavior\uc744 \uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4. See ',(0,s.kt)("a",{parentName:"p",href:"./automated-refetching#advanced-invalidation-with-abstract-tag-ids"},"Advanced Invalidation with abstract tag IDs")," for details on advanced invalidation handling with RTK Query."),(0,s.kt)("h3",{id:"revalidation-example"},"Revalidation Example"),(0,s.kt)("p",null,"This is an example of a ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"},"CRUD service")," for Posts. This implements the ",(0,s.kt)("a",{parentName:"p",href:"./automated-refetching#selectively-invalidating-lists"},"Selectively invalidating lists")," strategy and will most likely serve as a good foundation for real applications."),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/services/posts.ts"',title:'"src/app/services/posts.ts"'},"// Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport interface Post {\n  id: number\n  name: string\n}\n\ntype PostsResponse = Post[]\n\nexport const postApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query<PostsResponse, void>({\n      query: () => 'posts',\n      // Provides a list of `Posts` by `id`.\n      // If any mutation is executed that `invalidate`s any of these tags, this query will re-run to be always up-to-date.\n      // The `LIST` id is a \"virtual id\" we just made up to be able to invalidate this query specifically if a new `Posts` element was added.\n      providesTags: (result) =>\n        // is result available?\n        result\n          ? // successful query\n            [\n              ...result.map(({ id }) => ({ type: 'Posts', id } as const)),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : // an error occurred, but we still want to refetch this query when `{ type: 'Posts', id: 'LIST' }` is invalidated\n            [{ type: 'Posts', id: 'LIST' }],\n    }),\n    addPost: build.mutation<Post, Partial<Post>>({\n      query(body) {\n        return {\n          url: `post`,\n          method: 'POST',\n          body,\n        }\n      },\n      // Invalidates all Post-type queries providing the `LIST` id - after all, depending of the sort order,\n      // that newly created post could show up in any lists.\n      invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n    }),\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n    updatePost: build.mutation<Post, Partial<Post>>({\n      query(data) {\n        const { id, ...body } = data\n        return {\n          url: `post/${id}`,\n          method: 'PUT',\n          body,\n        }\n      },\n      // Invalidates all queries that subscribe to this Post `id` only.\n      // In this case, `getPost` will be re-run. `getPosts` *might*  rerun, if this id was under its results.\n      invalidatesTags: (result, error, { id }) => [{ type: 'Posts', id }],\n    }),\n    deletePost: build.mutation<{ success: boolean; id: number }, number>({\n      query(id) {\n        return {\n          url: `post/${id}`,\n          method: 'DELETE',\n        }\n      },\n      // Invalidates all queries that subscribe to this Post `id` only.\n      invalidatesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const {\n  useGetPostsQuery,\n  useAddPostMutation,\n  useGetPostQuery,\n  useUpdatePostMutation,\n  useDeletePostMutation,\n} = postApi\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/app/services/posts.ts"',title:'"src/app/services/posts.ts"'},"// Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const postApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => 'posts',\n      // Provides a list of `Posts` by `id`.\n      // If any mutation is executed that `invalidate`s any of these tags, this query will re-run to be always up-to-date.\n      // The `LIST` id is a \"virtual id\" we just made up to be able to invalidate this query specifically if a new `Posts` element was added.\n      providesTags: (result) =>\n        // is result available?\n        result\n          ? // successful query\n            [\n              ...result.map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : // an error occurred, but we still want to refetch this query when `{ type: 'Posts', id: 'LIST' }` is invalidated\n            [{ type: 'Posts', id: 'LIST' }],\n    }),\n    addPost: build.mutation({\n      query(body) {\n        return {\n          url: `post`,\n          method: 'POST',\n          body,\n        }\n      },\n      // Invalidates all Post-type queries providing the `LIST` id - after all, depending of the sort order,\n      // that newly created post could show up in any lists.\n      invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n    }),\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n    updatePost: build.mutation({\n      query(data) {\n        const { id, ...body } = data\n        return {\n          url: `post/${id}`,\n          method: 'PUT',\n          body,\n        }\n      },\n      // Invalidates all queries that subscribe to this Post `id` only.\n      // In this case, `getPost` will be re-run. `getPosts` *might*  rerun, if this id was under its results.\n      invalidatesTags: (result, error, { id }) => [{ type: 'Posts', id }],\n    }),\n    deletePost: build.mutation({\n      query(id) {\n        return {\n          url: `post/${id}`,\n          method: 'DELETE',\n        }\n      },\n      // Invalidates all queries that subscribe to this Post `id` only.\n      invalidatesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const {\n  useGetPostsQuery,\n  useAddPostMutation,\n  useGetPostQuery,\n  useUpdatePostMutation,\n  useDeletePostMutation,\n} = postApi\n")))),(0,s.kt)("iframe",{src:"https://codesandbox.io/embed/github/reduxjs/redux-toolkit/tree/master/examples/query/react/mutations?fontsize=14&runonclick=1&hidenavigation=1&module=%2Fsrc%2Fapp%2Fservices%2Fposts.ts&theme=dark",style:{width:"100%",height:"600px",border:0,borderRadius:"4px",overflow:"hidden"},title:"RTK Query - Mutations Example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}))}m.isMDXComponent=!0}}]);