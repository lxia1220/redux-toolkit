"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2747],{9718:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=a(5773),r=a(808),i=(a(7378),a(5318)),l=a(517),d=a(7637),o=["components"],u={id:"getDefaultMiddleware",title:"getDefaultMiddleware",sidebar_label:"getDefaultMiddleware",hide_title:!0},s=void 0,p={unversionedId:"api/getDefaultMiddleware",id:"api/getDefaultMiddleware",isDocsHomePage:!1,title:"getDefaultMiddleware",description:"&nbsp;",source:"@site/../docs/api/getDefaultMiddleware.mdx",sourceDirName:"api",slug:"/api/getDefaultMiddleware",permalink:"/redux-toolkit/api/getDefaultMiddleware",tags:[],version:"current",lastUpdatedAt:1656245190,formattedLastUpdatedAt:"6/26/2022",frontMatter:{id:"getDefaultMiddleware",title:"getDefaultMiddleware",sidebar_label:"getDefaultMiddleware",hide_title:!0},sidebar:"docs",previous:{title:"configureStore",permalink:"/redux-toolkit/api/configureStore"},next:{title:"Immutability Middleware",permalink:"/redux-toolkit/api/immutabilityMiddleware"}},m=[{value:"Intended Usage",id:"intended-usage",children:[],level:2},{value:"Included Default Middleware",id:"included-default-middleware",children:[{value:"Development",id:"development",children:[],level:3},{value:"Production",id:"production",children:[],level:3}],level:2},{value:"Customizing the Included Middleware",id:"customizing-the-included-middleware",children:[],level:2},{value:"API Reference",id:"api-reference",children:[],level:2}],c={toc:m};function f(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getdefaultmiddleware"},(0,i.kt)("inlineCode",{parentName:"h1"},"getDefaultMiddleware")),(0,i.kt)("p",null,"Returns an array containing the default list of middleware."),(0,i.kt)("h2",{id:"intended-usage"},"Intended Usage"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/api/configureStore"},(0,i.kt)("inlineCode",{parentName:"a"},"configureStore"))," adds some middleware to the Redux store setup automatically."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const store = configureStore({\n  reducer: rootReducer,\n})\n\n// Store has middleware added, because the middleware list was not customized\n")),(0,i.kt)("p",null,"If you want to customize the list of middleware, you can supply an array of middleware functions to ",(0,i.kt)("inlineCode",{parentName:"p"},"configureStore"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const store = configureStore({\n  reducer: rootReducer,\n  middleware: [thunk, logger],\n})\n\n// Store specifically has the thunk and logger middleware applied\n")),(0,i.kt)("p",null,"However, when you supply the ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware")," option, you are responsible for defining ",(0,i.kt)("em",{parentName:"p"},"all")," the middleware you want added\nto the store. ",(0,i.kt)("inlineCode",{parentName:"p"},"configureStore")," will not add any extra middleware beyond what you listed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," is useful if you want to add some custom middleware, but also still want to have the default\nmiddleware added as well:"),(0,i.kt)(d.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore } from '@reduxjs/toolkit'\n\nimport logger from 'redux-logger'\n\nimport rootReducer from './reducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n})\n\n// Store has all of the default middleware added, _plus_ the logger middleware\n"))),(0,i.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { configureStore } from '@reduxjs/toolkit'\n\nimport logger from 'redux-logger'\n\nimport rootReducer from './reducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n})\n\n// Store has all of the default middleware added, _plus_ the logger middleware\n")))),(0,i.kt)("p",null,"It is preferable to use the chainable ",(0,i.kt)("inlineCode",{parentName:"p"},".concat(...)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".prepend(...)")," methods of the returned ",(0,i.kt)("inlineCode",{parentName:"p"},"MiddlewareArray")," instead of the array spread operator, as the latter can lose valuable type information under some circumstances."),(0,i.kt)("h2",{id:"included-default-middleware"},"Included Default Middleware"),(0,i.kt)("h3",{id:"development"},"Development"),(0,i.kt)("p",null,"One of the goals of Redux Toolkit is to provide opinionated defaults and prevent common mistakes. As part of that,\n",(0,i.kt)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," includes some middleware that are added ",(0,i.kt)("strong",{parentName:"p"},"in development builds of your app only")," to\nprovide runtime checks for two common issues:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/api/immutabilityMiddleware"},"Immutability check middleware"),": deeply compares\nstate values for mutations. It can detect mutations in reducers during a dispatch, and also mutations that occur between\ndispatches (such as in a component or a selector). When a mutation is detected, it will throw an error and indicate the key\npath for where the mutated value was detected in the state tree. (Forked from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/leoasis/redux-immutable-state-invariant"},(0,i.kt)("inlineCode",{parentName:"a"},"redux-immutable-state-invariant")),".)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/api/serializabilityMiddleware"},"Serializability check middleware"),": a custom middleware created specifically for use in Redux Toolkit. Similar in\nconcept to ",(0,i.kt)("inlineCode",{parentName:"p"},"immutable-state-invariant"),", but deeply checks your state tree and your actions for non-serializable values\nsuch as functions, Promises, Symbols, and other non-plain-JS-data values. When a non-serializable value is detected, a\nconsole error will be printed with the key path for where the non-serializable value was detected."))),(0,i.kt)("p",null,"In addition to these development tool middleware, it also adds ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-thunk"},(0,i.kt)("inlineCode",{parentName:"a"},"redux-thunk")),"\nby default, since thunks are the basic recommended side effects middleware for Redux."),(0,i.kt)("p",null,"Currently, the return value is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = [thunk, immutableStateInvariant, serializableStateInvariant]\n")),(0,i.kt)("h3",{id:"production"},"Production"),(0,i.kt)("p",null,"Currently, the return value is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = [thunk]\n")),(0,i.kt)("h2",{id:"customizing-the-included-middleware"},"Customizing the Included Middleware"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," accepts an options object that allows customizing each middleware in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each middleware can be excluded the result array by passing ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," for its corresponding field"),(0,i.kt)("li",{parentName:"ul"},"Each middleware can have its options customized by passing the matching options object for its corresponding field")),(0,i.kt)("p",null,'This example shows excluding the serializable state check middleware, and passing a specific value for the thunk\nmiddleware\'s "extra argument":'),(0,i.kt)(d.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducer'\nimport { myCustomApiService } from './api'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: myCustomApiService,\n      },\n      serializableCheck: false,\n    }),\n})\n"))),(0,i.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducer'\nimport { myCustomApiService } from './api'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: myCustomApiService,\n      },\n      serializableCheck: false,\n    }),\n})\n")))),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},'interface ThunkOptions<E = any> {\n  extraArgument: E\n}\n\ninterface ImmutableStateInvariantMiddlewareOptions {\n  // See "Immutability Middleware" page for definition\n}\n\ninterface SerializableStateInvariantMiddlewareOptions {\n  // See "Serializability Middleware" page for definition\n}\n\ninterface GetDefaultMiddlewareOptions {\n  thunk?: boolean | ThunkOptions\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\n}\n\nfunction getDefaultMiddleware<S = any>(\n  options: GetDefaultMiddlewareOptions = {}\n): Middleware<{}, S>[]\n')))}f.isMDXComponent=!0}}]);