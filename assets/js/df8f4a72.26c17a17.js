"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5145],{8864:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var r=n(5773),a=n(808),i=(n(7378),n(5318)),o=n(517),s=n(7637),p=["components"],l={id:"usage-with-typescript",title:"Usage With TypeScript",sidebar_label:"Usage With TypeScript",hide_title:!0,description:"RTK Query > TypeScript: Instructions on how to use RTK Query with TypeScript"},u=void 0,d={unversionedId:"rtk-query/usage-with-typescript",id:"rtk-query/usage-with-typescript",isDocsHomePage:!1,title:"Usage With TypeScript",description:"RTK Query > TypeScript: Instructions on how to use RTK Query with TypeScript",source:"@site/../docs/rtk-query/usage-with-typescript.mdx",sourceDirName:"rtk-query",slug:"/rtk-query/usage-with-typescript",permalink:"/redux-toolkit/rtk-query/usage-with-typescript",tags:[],version:"current",lastUpdatedAt:1656210075,formattedLastUpdatedAt:"6/26/2022",frontMatter:{id:"usage-with-typescript",title:"Usage With TypeScript",sidebar_label:"Usage With TypeScript",hide_title:!0,description:"RTK Query > TypeScript: Instructions on how to use RTK Query with TypeScript"},sidebar:"docs",previous:{title:"Examples",permalink:"/redux-toolkit/rtk-query/usage/examples"},next:{title:"Queries",permalink:"/redux-toolkit/rtk-query/usage/queries"}},m=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"<code>createApi</code>",id:"createapi",children:[{value:"Using auto-generated React Hooks",id:"using-auto-generated-react-hooks",children:[],level:3},{value:"Typing a <code>baseQuery</code>",id:"typing-a-basequery",children:[],level:3},{value:"Typing query and mutation <code>endpoints</code>",id:"typing-query-and-mutation-endpoints",children:[],level:3},{value:"Typing a <code>queryFn</code>",id:"typing-a-queryfn",children:[],level:3},{value:"Typing <code>providesTags</code>/<code>invalidatesTags</code>",id:"typing-providestagsinvalidatestags",children:[],level:3}],level:2},{value:"Skipping queries with TypeScript using <code>skipToken</code>",id:"skipping-queries-with-typescript-using-skiptoken",children:[],level:2},{value:"Type safe error handling",id:"type-safe-error-handling",children:[{value:"Error result example",id:"error-result-example",children:[],level:3},{value:"Inline error handling example",id:"inline-error-handling-example",children:[],level:3}],level:2}],c={toc:m};function y(e){var t=e.components,n=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usage-with-typescript"},"Usage With TypeScript"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\ubc30\uc6b8 \ub0b4\uc6a9")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Typescript\uc640 \ud568\uaed8 RTK Query\uc758 \uc5ec\ub7ec API\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95")))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Redux Toolkit \ud328\ud0a4\uc9c0\uc758 \ud0c0 \ubd80\ubd84\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c RTK Query\ub294 TypeScript\ub85c \uc791\uc131\ub418\uc5c8\uc73c\uba70 \ud574\ub2f9 API\ub294 TypeScript \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc6d0\ud65c\ud558\uac8c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4."),(0,i.kt)("p",null,"\uc774 \ud398\uc774\uc9c0\uc5d0\uc11c\ub294 TypeScript\uc640 \ud568\uaed8 RTK Query\uc5d0 \ud3ec\ud568\ub41c API\ub97c \uc0ac\uc6a9\ud558\uace0 \uc62c\ubc14\ub974\uac8c \uc785\ub825\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc138\ubd80 \uc815\ubcf4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"\ucd5c\uace0\uc758 \uacb0\uacfc\ub97c \uc704\ud574 RTK Query\uc640 \ud568\uaed8 Typescript 4.1+ \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.")),(0,i.kt)("p",{parentName:"div"},"\uc774 \ud398\uc774\uc9c0\uc5d0 \uc124\uba85\ub418\uc9c0 \uc54a\uc740 \uc720\ud615\uc758 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\ub294 \uacbd\uc6b0, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-toolkit/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"},"\uc774\uc288\ub97c \uc5f4\uc5b4")," \ub17c\uc758 \ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."))),(0,i.kt)("h2",{id:"createapi"},(0,i.kt)("inlineCode",{parentName:"h2"},"createApi")),(0,i.kt)("h3",{id:"using-auto-generated-react-hooks"},"Using auto-generated React Hooks"),(0,i.kt)("p",null,"The React-specific entry point for RTK Query exports a version of ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/createApi"},(0,i.kt)("inlineCode",{parentName:"a"},"createApi"))," which automatically generates React hooks for each of the defined query & mutation ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/createApi#endpoints"},(0,i.kt)("inlineCode",{parentName:"a"},"endpoints")),"."),(0,i.kt)("p",null,"TypeScript \uc0ac\uc6a9\uc790\uac00 \uc790\ub3d9 \uc0dd\uc131\ub41c React Hooks\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 ",(0,i.kt)("strong",{parentName:"p"},"TS4.1+ \uc758 \ubc84\uc804\uc774 \ud544\uc694\ud569\ub2c8\ub2e4"),"."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Need to use the React-specific entry point to allow generating React hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport type { Pokemon } from './types'\n\n// Define a service using a base URL and expected endpoints\nexport const pokemonApi = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: (builder) => ({\n    getPokemonByName: builder.query<Pokemon, string>({\n      query: (name) => `pokemon/${name}`,\n    }),\n  }),\n})\n\n// highlight-start\n// Export hooks for usage in function components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetPokemonByNameQuery } = pokemonApi\n// highlight-end\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Need to use the React-specific entry point to allow generating React hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\n// Define a service using a base URL and expected endpoints\nexport const pokemonApi = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: (builder) => ({\n    getPokemonByName: builder.query({\n      query: (name) => `pokemon/${name}`,\n    }),\n  }),\n})\n\n// highlight-start\n// Export hooks for usage in function components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetPokemonByNameQuery } = pokemonApi\n// highlight-end\n")))),(0,i.kt)("p",null,"\uc774\uc804 \ubc84\uc804\uc758 TS\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, ",(0,i.kt)("inlineCode",{parentName:"p"},"api.endpoints.[endpointName].useQuery/useMutation")," \ub97c \ud1b5\ud574 \ub3d9\uc77c\ud55c hooks\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Accessing api hooks directly"',title:'"Accessing',api:!0,hooks:!0,'directly"':!0},"import { pokemonApi } from './pokemon'\n\nconst useGetPokemonByNameQuery = pokemonApi.endpoints.getPokemonByName.useQuery\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Accessing api hooks directly"',title:'"Accessing',api:!0,hooks:!0,'directly"':!0},"import { pokemonApi } from './pokemon'\n\nconst useGetPokemonByNameQuery = pokemonApi.endpoints.getPokemonByName.useQuery\n")))),(0,i.kt)("h3",{id:"typing-a-basequery"},"Typing a ",(0,i.kt)("inlineCode",{parentName:"h3"},"baseQuery")),(0,i.kt)("p",null,"Typing a custom ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/createApi#basequery"},(0,i.kt)("inlineCode",{parentName:"a"},"baseQuery"))," can be done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseQueryFn")," type exported by RTK Query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Base Query signature" no-transpile',title:'"Base',Query:!0,'signature"':!0,"no-transpile":!0},"export type BaseQueryFn<\n  Args = any,\n  Result = unknown,\n  Error = unknown,\n  DefinitionExtraOptions = {},\n  Meta = {}\n> = (\n  args: Args,\n  api: BaseQueryApi,\n  extraOptions: DefinitionExtraOptions\n) => MaybePromise<QueryReturnValue<Result, Error, Meta>>\n\nexport interface BaseQueryApi {\n  signal: AbortSignal\n  dispatch: ThunkDispatch<any, any, any>\n  getState: () => unknown\n}\n\nexport type QueryReturnValue<T = unknown, E = unknown, M = unknown> =\n  | {\n      error: E\n      data?: undefined\n      meta?: M\n    }\n  | {\n      error?: undefined\n      data: T\n      meta?: M\n    }\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BaseQueryFn")," \ud0c0\uc785\uc740 \ub2e4\uc74c\uc758 generic\ub4e4\uc744 \uac00\uc9d1\ub2c8\ub2e4:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Args")," - \ud568\uc218\uc758 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130 \ud0c0\uc785\uc785\ub2c8\ub2e4. The result returned by a ",(0,i.kt)("a",{parentName:"li",href:"/redux-toolkit/rtk-query/api/createApi#query"},(0,i.kt)("inlineCode",{parentName:"a"},"query"))," property on an endpoint will be passed here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Result")," - success case\uc758 \uacbd\uc6b0\uc5d0 \ubc18\ud658\ub420 ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," \uc18d\uc131\uc758 type \uc785\ub2c8\ub2e4. Unless you expect all queries and mutations to return the same type, it is recommended to keep this typed as ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),", and specify the types individually as shown ",(0,i.kt)("a",{parentName:"li",href:"#typing-query-and-mutation-endpoints"},"below"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Error")," - error case\uc758 \uacbd\uc6b0\uc5d0 \ubc18\ud658\ub420 ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," \uc18d\uc131\uc758 type \uc785\ub2c8\ub2e4. This type also applies to all ",(0,i.kt)("a",{parentName:"li",href:"#typing-a-queryfn"},(0,i.kt)("inlineCode",{parentName:"a"},"queryFn"))," functions used in endpoints throughout the API definition."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DefinitionExtraOptions")," - The type for the third parameter of the function. The value provided to the ",(0,i.kt)("a",{parentName:"li",href:"/redux-toolkit/rtk-query/api/createApi#extraoptions"},(0,i.kt)("inlineCode",{parentName:"a"},"extraOptions"))," property on an endpoint will be passed here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Meta")," - the type of the ",(0,i.kt)("inlineCode",{parentName:"li"},"meta")," property that may be returned from calling the ",(0,i.kt)("inlineCode",{parentName:"li"},"baseQuery"),". The ",(0,i.kt)("inlineCode",{parentName:"li"},"meta")," property is accessible as the second argument to ",(0,i.kt)("a",{parentName:"li",href:"/redux-toolkit/rtk-query/api/createApi#transformresponse"},(0,i.kt)("inlineCode",{parentName:"a"},"transformResponse")),".")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," property returned from a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseQuery")," will always be considered as potentially undefined, as a ",(0,i.kt)("inlineCode",{parentName:"p"},"throw")," in the error case may result in it not being provided. When accessing values from the ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," property, this should be accounted for, e.g. using ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"},"optional chaining")))),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Simple baseQuery TypeScript example"',title:'"Simple',baseQuery:!0,TypeScript:!0,'example"':!0},"import { createApi, BaseQueryFn } from '@reduxjs/toolkit/query'\n\nconst simpleBaseQuery: BaseQueryFn<\n  string, // Args\n  unknown, // Result\n  { reason: string }, // Error\n  { shout?: boolean }, // DefinitionExtraOptions\n  { timestamp: number } // Meta\n> = (arg, api, extraOptions) => {\n  // `arg` has the type `string`\n  // `api` has the type `BaseQueryApi` (not configurable)\n  // `extraOptions` has the type `{ shout?: boolean }\n\n  const meta = { timestamp: Date.now() }\n\n  if (arg === 'forceFail') {\n    return {\n      error: {\n        reason: 'Intentionally requested to fail!',\n        meta,\n      },\n    }\n  }\n\n  if (extraOptions.shout) {\n    return { data: 'CONGRATULATIONS', meta }\n  }\n\n  return { data: 'congratulations', meta }\n}\n\nconst api = createApi({\n  baseQuery: simpleBaseQuery,\n  endpoints: (builder) => ({\n    getSupport: builder.query({\n      query: () => 'support me',\n      extraOptions: {\n        shout: true,\n      },\n    }),\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Simple baseQuery TypeScript example"',title:'"Simple',baseQuery:!0,TypeScript:!0,'example"':!0},"import { createApi } from '@reduxjs/toolkit/query'\n\nconst simpleBaseQuery = (arg, api, extraOptions) => {\n  // `arg` has the type `string`\n  // `api` has the type `BaseQueryApi` (not configurable)\n  // `extraOptions` has the type `{ shout?: boolean }\n\n  const meta = { timestamp: Date.now() }\n\n  if (arg === 'forceFail') {\n    return {\n      error: {\n        reason: 'Intentionally requested to fail!',\n        meta,\n      },\n    }\n  }\n\n  if (extraOptions.shout) {\n    return { data: 'CONGRATULATIONS', meta }\n  }\n\n  return { data: 'congratulations', meta }\n}\n\nconst api = createApi({\n  baseQuery: simpleBaseQuery,\n  endpoints: (builder) => ({\n    getSupport: builder.query({\n      query: () => 'support me',\n      extraOptions: {\n        shout: true,\n      },\n    }),\n  }),\n})\n")))),(0,i.kt)("h3",{id:"typing-query-and-mutation-endpoints"},"Typing query and mutation ",(0,i.kt)("inlineCode",{parentName:"h3"},"endpoints")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"endpoints")," for an api are defined as an object using the builder syntax. Both ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mutation")," endpoints can be typed by providing types to the generics in ",(0,i.kt)("inlineCode",{parentName:"p"},"<ResultType, QueryArg>")," format."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ResultType")," - The type of the final data returned by the query, factoring an optional ",(0,i.kt)("a",{parentName:"li",href:"/redux-toolkit/rtk-query/api/createApi#transformresponse"},(0,i.kt)("inlineCode",{parentName:"a"},"transformResponse")),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"transformResponse")," is not provided, then it is treated as though a successful query will return this type instead."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"transformResponse")," ",(0,i.kt)("em",{parentName:"li"},"is")," provided, the input type for ",(0,i.kt)("inlineCode",{parentName:"li"},"transformResponse")," must also be specified, to indicate the type that the initial query returns. The return type for ",(0,i.kt)("inlineCode",{parentName:"li"},"transformResponse")," must match ",(0,i.kt)("inlineCode",{parentName:"li"},"ResultType"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"queryFn")," is used rather than ",(0,i.kt)("inlineCode",{parentName:"li"},"query"),", then it must return the following shape for the success case:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"{\n  data: ResultType\n}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QueryArg")," - The type of the input that will be passed as the only parameter to the ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," property of the endpoint, or the first parameter of a ",(0,i.kt)("inlineCode",{parentName:"li"},"queryFn")," property if used instead.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," doesn't have a parameter, then ",(0,i.kt)("inlineCode",{parentName:"li"},"void")," type has to be provided explicitly."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," has an optional parameter, then a union type with the type of parameter, and ",(0,i.kt)("inlineCode",{parentName:"li"},"void")," has to be provided, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"number | void"),".")))),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Defining endpoints with TypeScript"',title:'"Defining',endpoints:!0,with:!0,'TypeScript"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    //              ResultType  QueryArg\n    //                    v       v\n    getPost: build.query<Post, number>({\n      // inferred as `number` from the `QueryArg` type\n      //       v\n      query: (id) => `post/${id}`,\n      // An explicit type must be provided to the raw result that the query returns\n      // when using `transformResponse`\n      //                             v\n      transformResponse: (rawResult: { result: { post: Post } }, meta) => {\n        //                                                        ^\n        // The optional `meta` property is available based on the type for the `baseQuery` used\n\n        // The return value for `transformResponse` must match `ResultType`\n        return rawResult.result.post\n      },\n    }),\n    // highlight-end\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Defining endpoints with TypeScript"',title:'"Defining',endpoints:!0,with:!0,'TypeScript"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    //              ResultType  QueryArg\n    //                    v       v\n    getPost: build.query({\n      // inferred as `number` from the `QueryArg` type\n      //       v\n      query: (id) => `post/${id}`,\n      // An explicit type must be provided to the raw result that the query returns\n      // when using `transformResponse`\n      //                             v\n      transformResponse: (rawResult, meta) => {\n        //                                                        ^\n        // The optional `meta` property is available based on the type for the `baseQuery` used\n\n        // The return value for `transformResponse` must match `ResultType`\n        return rawResult.result.post\n      },\n    }),\n    // highlight-end\n  }),\n})\n")))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"queries")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mutations")," can also have their return type defined by a ",(0,i.kt)("a",{parentName:"p",href:"#typing-a-basequery"},(0,i.kt)("inlineCode",{parentName:"a"},"baseQuery"))," rather than the method shown above, however, unless you expect all of your queries and mutations to return the same type, it is recommended to leave the return type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseQuery")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),"."))),(0,i.kt)("h3",{id:"typing-a-queryfn"},"Typing a ",(0,i.kt)("inlineCode",{parentName:"h3"},"queryFn")),(0,i.kt)("p",null,"As mentioned in ",(0,i.kt)("a",{parentName:"p",href:"#typing-query-and-mutation-endpoints"},"Typing query and mutation endpoints"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"queryFn")," will receive its result & arg types from the generics provided to the corresponding built endpoint."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { getRandomName } from './randomData'\n\ninterface Post {\n  id: number\n  name: string\n}\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    //              ResultType  QueryArg\n    //                    v       v\n    getPost: build.query<Post, number>({\n      // inferred as `number` from the `QueryArg` type\n      //         v\n      queryFn: (arg, queryApi, extraOptions, baseQuery) => {\n        const post: Post = {\n          id: arg,\n          name: getRandomName(),\n        }\n        // For the success case, the return type for the `data` property\n        // must match `ResultType`\n        //              v\n        return { data: post }\n      },\n    }),\n    // highlight-end\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { getRandomName } from './randomData'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    //              ResultType  QueryArg\n    //                    v       v\n    getPost: build.query({\n      // inferred as `number` from the `QueryArg` type\n      //         v\n      queryFn: (arg, queryApi, extraOptions, baseQuery) => {\n        const post = {\n          id: arg,\n          name: getRandomName(),\n        }\n        // For the success case, the return type for the `data` property\n        // must match `ResultType`\n        //              v\n        return { data: post }\n      },\n    }),\n    // highlight-end\n  }),\n})\n")))),(0,i.kt)("p",null,"The error type that a ",(0,i.kt)("inlineCode",{parentName:"p"},"queryFn")," must return is determined by the ",(0,i.kt)("a",{parentName:"p",href:"#typing-a-basequery"},(0,i.kt)("inlineCode",{parentName:"a"},"baseQuery"))," provided to ",(0,i.kt)("inlineCode",{parentName:"p"},"createApi"),"."),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/fetchBaseQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"fetchBaseQuery")),", the error type is like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="fetchBaseQuery error shape" no-transpile',title:'"fetchBaseQuery',error:!0,'shape"':!0,"no-transpile":!0},"{\n  status: number\n  data: any\n}\n")),(0,i.kt)("p",null,"An error case for the example above using ",(0,i.kt)("inlineCode",{parentName:"p"},"queryFn")," and the error type from ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchBaseQuery")," could look like:"),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="queryFn error example with error type from fetchBaseQuery"',title:'"queryFn',error:!0,example:!0,with:!0,type:!0,from:!0,'fetchBaseQuery"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { getRandomName } from './randomData'\n\ninterface Post {\n  id: number\n  name: string\n}\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    getPost: build.query<Post, number>({\n      queryFn: (arg, queryApi, extraOptions, baseQuery) => {\n        // highlight-start\n        if (arg <= 0) {\n          return {\n            error: {\n              status: 500,\n              statusText: 'Internal Server Error',\n              data: 'Invalid ID provided.',\n            },\n          }\n        }\n        // highlight-end\n        const post: Post = {\n          id: arg,\n          name: getRandomName(),\n        }\n        return { data: post }\n      },\n    }),\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="queryFn error example with error type from fetchBaseQuery"',title:'"queryFn',error:!0,example:!0,with:!0,type:!0,from:!0,'fetchBaseQuery"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { getRandomName } from './randomData'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    getPost: build.query({\n      queryFn: (arg, queryApi, extraOptions, baseQuery) => {\n        // highlight-start\n        if (arg <= 0) {\n          return {\n            error: {\n              status: 500,\n              statusText: 'Internal Server Error',\n              data: 'Invalid ID provided.',\n            },\n          }\n        }\n        // highlight-end\n        const post = {\n          id: arg,\n          name: getRandomName(),\n        }\n        return { data: post }\n      },\n    }),\n  }),\n})\n")))),(0,i.kt)("p",null,"For users who wish to ",(0,i.kt)("em",{parentName:"p"},"only")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"queryFn")," for each endpoint and not include a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseQuery")," at all, RTK Query provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"fakeBaseQuery")," function that can be used to easily specify the error type each ",(0,i.kt)("inlineCode",{parentName:"p"},"queryFn")," should return."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Excluding baseQuery for all endpoints"',title:'"Excluding',baseQuery:!0,for:!0,all:!0,'endpoints"':!0},"import { createApi, fakeBaseQuery } from '@reduxjs/toolkit/query'\n\n// highlight-start\ntype CustomErrorType = { reason: 'too cold' | 'too hot' }\n// highlight-end\n\nconst api = createApi({\n  // highlight-start\n  // This type will be used as the error type for all `queryFn` functions provided\n  //                              v\n  baseQuery: fakeBaseQuery<CustomErrorType>(),\n  // highlight-end\n  endpoints: (build) => ({\n    eatPorridge: build.query<'just right', 1 | 2 | 3>({\n      // highlight-start\n      queryFn(seat) {\n        if (seat === 1) {\n          return { error: { reason: 'too cold' } }\n        }\n\n        if (seat === 2) {\n          return { error: { reason: 'too hot' } }\n        }\n\n        return { data: 'just right' }\n      },\n      // highlight-end\n    }),\n    microwaveHotPocket: build.query<'delicious!', number>({\n      // highlight-start\n      queryFn(duration) {\n        if (duration < 110) {\n          return { error: { reason: 'too cold' } }\n        }\n        if (duration > 140) {\n          return { error: { reason: 'too hot' } }\n        }\n\n        return { data: 'delicious!' }\n      },\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Excluding baseQuery for all endpoints"',title:'"Excluding',baseQuery:!0,for:!0,all:!0,'endpoints"':!0},"import { createApi, fakeBaseQuery } from '@reduxjs/toolkit/query'\n// highlight-end\n\nconst api = createApi({\n  // highlight-start\n  // This type will be used as the error type for all `queryFn` functions provided\n  //                              v\n  baseQuery: fakeBaseQuery(),\n  // highlight-end\n  endpoints: (build) => ({\n    eatPorridge: build.query({\n      // highlight-start\n      queryFn(seat) {\n        if (seat === 1) {\n          return { error: { reason: 'too cold' } }\n        }\n\n        if (seat === 2) {\n          return { error: { reason: 'too hot' } }\n        }\n\n        return { data: 'just right' }\n      },\n      // highlight-end\n    }),\n    microwaveHotPocket: build.query({\n      // highlight-start\n      queryFn(duration) {\n        if (duration < 110) {\n          return { error: { reason: 'too cold' } }\n        }\n        if (duration > 140) {\n          return { error: { reason: 'too hot' } }\n        }\n\n        return { data: 'delicious!' }\n      },\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,i.kt)("h3",{id:"typing-providestagsinvalidatestags"},"Typing ",(0,i.kt)("inlineCode",{parentName:"h3"},"providesTags"),"/",(0,i.kt)("inlineCode",{parentName:"h3"},"invalidatesTags")),(0,i.kt)("p",null,"RTK Query utilizes a cache tag invalidation system in order to provide ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/automated-refetching"},"automated re-fetching")," of stale data."),(0,i.kt)("p",null,"When using the function notation, both the ",(0,i.kt)("inlineCode",{parentName:"p"},"providesTags")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," properties on endpoints are called with the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"result: ",(0,i.kt)("inlineCode",{parentName:"li"},"ResultType")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," - The result returned by a successful query. The type corresponds with ",(0,i.kt)("inlineCode",{parentName:"li"},"ResultType")," as ",(0,i.kt)("a",{parentName:"li",href:"#typing-query-and-mutation-endpoints"},"supplied to the built endpoint"),". In the error case for a query, this will be ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},"error: ",(0,i.kt)("inlineCode",{parentName:"li"},"ErrorType")," | ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined")," - The error returned by an errored query. The type corresponds with ",(0,i.kt)("inlineCode",{parentName:"li"},"Error")," as ",(0,i.kt)("a",{parentName:"li",href:"#typing-a-basequery"},"supplied to the ",(0,i.kt)("inlineCode",{parentName:"a"},"baseQuery")," for the api"),". In the success case for a query, this will be ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},"arg: ",(0,i.kt)("inlineCode",{parentName:"li"},"QueryArg")," - The argument supplied to the ",(0,i.kt)("inlineCode",{parentName:"li"},"query")," property when the query itself is called. The type corresponds with ",(0,i.kt)("inlineCode",{parentName:"li"},"QueryArg")," as ",(0,i.kt)("a",{parentName:"li",href:"#typing-query-and-mutation-endpoints"},"supplied to the built endpoint"),".")),(0,i.kt)("p",null,"A recommended use-case with ",(0,i.kt)("inlineCode",{parentName:"p"},"providesTags")," when a query returns a list of items is to provide a tag for each item in the list using the entity ID, as well as a 'LIST' ID tag (see ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/automated-refetching#advanced-invalidation-with-abstract-tag-ids"},"Advanced Invalidation with abstract tag IDs"),")."),(0,i.kt)("p",null,"This is often written by spreading the result of mapping the received data into an array, as well as an additional item in the array for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'LIST'")," ID tag. When spreading the mapped array, by default, TypeScript will broaden the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". As the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," must correspond to one of the string literals provided to the ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/createApi#tagtypes"},(0,i.kt)("inlineCode",{parentName:"a"},"tagTypes"))," property of the api, the broad ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," type will not satisfy TypeScript. In order to alleviate this, the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," can be cast ",(0,i.kt)("inlineCode",{parentName:"p"},"as const")," to prevent the type being broadened to ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="providesTags TypeScript example"',title:'"providesTags',TypeScript:!0,'example"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\ntype PostsResponse = Post[]\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query<PostsResponse, void>({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result\n          ? [\n              // highlight-start\n              ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n              { type: 'Posts', id: 'LIST' },\n              // highlight-end\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="providesTags TypeScript example"',title:'"providesTags',TypeScript:!0,'example"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result\n          ? [\n              // highlight-start\n              ...result.map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'LIST' },\n              // highlight-end\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n  }),\n})\n")))),(0,i.kt)("h2",{id:"skipping-queries-with-typescript-using-skiptoken"},"Skipping queries with TypeScript using ",(0,i.kt)("inlineCode",{parentName:"h2"},"skipToken")),(0,i.kt)("p",null,"RTK Query provides the ability to conditionally skip queries from automatically running using the ",(0,i.kt)("inlineCode",{parentName:"p"},"skip")," parameter as part of query hook options (see ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/usage/conditional-fetching"},"Conditional Fetching"),")."),(0,i.kt)("p",null,"TypeScript users may find that they encounter invalid type scenarios when a query argument is typed to not be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", and they attempt to ",(0,i.kt)("inlineCode",{parentName:"p"},"skip")," the query when an argument would not be valid."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="API definition"',title:'"API','definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Post } from './types'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // Query argument is required to be `number`, and can't be `undefined`\n    //                            V\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n    }),\n  }),\n})\n\nexport const { useGetPostQuery } = api\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="API definition"',title:'"API','definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // Query argument is required to be `number`, and can't be `undefined`\n    //                            V\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n    }),\n  }),\n})\n\nexport const { useGetPostQuery } = api\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Using skip in a component"',title:'"Using',skip:!0,in:!0,a:!0,'component"':!0},"import { useGetPostQuery } from './api'\n\nfunction MaybePost({ id }: { id?: number }) {\n  // This will produce a typescript error:\n  // Argument of type 'number | undefined' is not assignable to parameter of type 'number | unique symbol'.\n  // Type 'undefined' is not assignable to type 'number | unique symbol'.\n\n  // @ts-expect-error id passed must be a number, but we don't call it when it isn't a number\n  const { data } = useGetPostQuery(id, { skip: !id })\n\n  return <div>...</div>\n}\n")),(0,i.kt)("p",null,"While you might be able to convince yourself that the query won't be called unless the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," arg is a ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," at the time, TypeScript won't be convinced so easily."),(0,i.kt)("p",null,"RTK Query provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"skipToken")," export which can be used as an alternative to the ",(0,i.kt)("inlineCode",{parentName:"p"},"skip")," option in order to skip queries, while remaining type-safe. When ",(0,i.kt)("inlineCode",{parentName:"p"},"skipToken")," is passed as the query argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useQueryState")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuerySubscription"),", it provides the same effect as setting ",(0,i.kt)("inlineCode",{parentName:"p"},"skip: true")," in the query options, while also being a valid argument in scenarios where the ",(0,i.kt)("inlineCode",{parentName:"p"},"arg")," might be undefined otherwise."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Using skipToken in a component"',title:'"Using',skipToken:!0,in:!0,a:!0,'component"':!0},"import { skipToken } from '@reduxjs/toolkit/query/react'\nimport { useGetPostQuery } from './api'\n\nfunction MaybePost({ id }: { id?: number }) {\n  // When `id` is nullish, we will still skip the query.\n  // TypeScript is also happy that the query will only ever be called with a `number` now\n  const { data } = useGetPostQuery(id ?? skipToken)\n\n  return <div>...</div>\n}\n")),(0,i.kt)("h2",{id:"type-safe-error-handling"},"Type safe error handling"),(0,i.kt)("p",null,"When an error is gracefully provided from a ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/createApi#baseQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"base query")),", RTK query will provide the error\ndirectly. If an unexpected error is thrown by user code rather than a handled error,\nthat error will be transformed into a ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializedError")," shape. Users should make sure that they are checking which kind of error they are dealing with before attempting to access its properties. This can be done in a type safe manner either\nby using a type guard, e.g. by checking for ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing"},"discriminated properties"),",\nor using a ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"},"type predicate"),"."),(0,i.kt)("p",null,"When using ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/fetchBaseQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"fetchBaseQuery")),", as your base query,\nerrors will be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"FetchBaseQueryError | SerializedError"),". The specific shapes of those types can be seen below."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="FetchBaseQueryError type"',title:'"FetchBaseQueryError','type"':!0},'export type FetchBaseQueryError =\n  | {\n      /**\n       * * `number`:\n       *   HTTP status code\n       */\n      status: number\n      data: unknown\n    }\n  | {\n      /**\n       * * `"FETCH_ERROR"`:\n       *   An error that occurred during execution of `fetch` or the `fetchFn` callback option\n       **/\n      status: \'FETCH_ERROR\'\n      data?: undefined\n      error: string\n    }\n  | {\n      /**\n       * * `"PARSING_ERROR"`:\n       *   An error happened during parsing.\n       *   Most likely a non-JSON-response was returned with the default `responseHandler` "JSON",\n       *   or an error occurred while executing a custom `responseHandler`.\n       **/\n      status: \'PARSING_ERROR\'\n      originalStatus: number\n      data: string\n      error: string\n    }\n  | {\n      /**\n       * * `"CUSTOM_ERROR"`:\n       *   A custom error type that you can return from your `queryFn` where another error might not make sense.\n       **/\n      status: \'CUSTOM_ERROR\'\n      data?: unknown\n      error: string\n    }\n'))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="FetchBaseQueryError type"',title:'"FetchBaseQueryError','type"':!0},"export {}\n")))),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="SerializedError type"',title:'"SerializedError','type"':!0},"export interface SerializedError {\n  name?: string\n  message?: string\n  stack?: string\n  code?: string\n}\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SerializedError type"',title:'"SerializedError','type"':!0},"export {}\n")))),(0,i.kt)("h3",{id:"error-result-example"},"Error result example"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchBaseQuery"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," property returned from a hook will have the type ",(0,i.kt)("inlineCode",{parentName:"p"},"FetchBaseQueryError | SerializedError | undefined"),".\nIf an error is present, you can access error properties after narrowing the type to either ",(0,i.kt)("inlineCode",{parentName:"p"},"FetchBaseQueryError")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializedError"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { api } from './services/api'\n\nfunction PostDetail() {\n  const { data, error, isLoading } = usePostsQuery()\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  if (error) {\n    if ('status' in error) {\n      // you can access all properties of `FetchBaseQueryError` here\n      const errMsg = 'error' in error ? error.error : JSON.stringify(error.data)\n\n      return (\n        <div>\n          <div>An error has occurred:</div>\n          <div>{errMsg}</div>\n        </div>\n      )\n    }\n    else {\n        // you can access all properties of `SerializedError` here\n        return <div>{error.message}</div>\n    }\n  }\n\n  if (data) {\n    return (\n      <div>\n        {data.map((post) => (\n          <div key={post.id}>Name: {post.name}</div>\n        ))}\n      </div>\n    )\n  }\n\n  return null\n}\n")),(0,i.kt)("h3",{id:"inline-error-handling-example"},"Inline error handling example"),(0,i.kt)("p",null,"When handling errors inline after ",(0,i.kt)("a",{parentName:"p",href:"/redux-toolkit/api/createAsyncThunk#unwrapping-result-actions"},(0,i.kt)("inlineCode",{parentName:"a"},"unwrapping"))," a mutation call,\na thrown error will have a type of ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," for typescript versions below 4.4,\nor ",(0,i.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#use-unknown-catch-variables"},(0,i.kt)("inlineCode",{parentName:"a"},"unknown")," for versions 4.4+"),".\nIn order to safely access properties of the error, you must first narrow the type to a known type.\nThis can be done using a ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"},"type predicate"),"\nas shown below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="services/helpers.ts"',title:'"services/helpers.ts"'},"import { FetchBaseQueryError } from '@reduxjs/toolkit/query'\n\n/**\n * Type predicate to narrow an unknown error to `FetchBaseQueryError`\n */\nexport function isFetchBaseQueryError(\n  error: unknown\n): error is FetchBaseQueryError {\n  return typeof error === 'object' && error != null && 'status' in error\n}\n\n/**\n * Type predicate to narrow an unknown error to an object with a string 'message' property\n */\nexport function isErrorWithMessage(\n  error: unknown\n): error is { message: string } {\n  return (\n    typeof error === 'object' &&\n    error != null &&\n    'message' in error &&\n    typeof (error as any).message === 'string'\n  )\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="addPost.tsx"',title:'"addPost.tsx"'},"import { useState } from 'react'\nimport { useSnackbar } from 'notistack'\nimport { api } from './services/api'\nimport { isFetchBaseQueryError, isErrorWithMessage } from './services/helpers'\n\nfunction AddPost() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n  const [name, setName] = useState('')\n  const [addPost] = useAddPostMutation()\n\n  async function handleAddPost() {\n    try {\n      await addPost(name).unwrap()\n      setName('')\n    } catch (err) {\n      if (isFetchBaseQueryError(err)) {\n        // you can access all properties of `FetchBaseQueryError` here\n        const errMsg = 'error' in err ? err.error : JSON.stringify(err.data)\n        enqueueSnackbar(errMsg, { variant: 'error' })\n      } else if (isErrorWithMessage(err)) {\n        // you can access a string 'message' property here\n        enqueueSnackbar(err.message, { variant: 'error' })\n      }\n    }\n  }\n\n  return (\n    <div>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button>Add post</button>\n    </div>\n  )\n}\n")))}y.isMDXComponent=!0}}]);